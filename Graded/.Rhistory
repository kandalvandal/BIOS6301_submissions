# TS: correct the index
# And this return the mean of patient with id 50 to  1
bobert = rbind(mean(x[(job - numb+1):job, "a1c"], na.rm=TRUE),bobert)
numb = 0
}
}
bobert = rbind(mean(x[(dim(x)[1] - numb):dim(x)[1], "a1c"], na.rm=TRUE), bobert)
View(bobert)
rev(bobert)
bobert$X6.65444426795186 = rev(bobert$X6.65444426795186)
View(bobert)
for(jok in 1:dim(x)[1]){
if(is.na(x[jok, "a1c"])){
# dim(bobert) return 50,1. And you want to use nrow
for(fl in 1:dim(bobert)[1]){
if(fl == x[jok, "id"])
{
x[jok, "a1c"] = bobert[fl,]
}
}
}
}
print(tapply(x[,'a1c'], x[,'id'], mean, na.rm=TRUE))
print(tapply(x[,'visit'], x[,'id'], max, na.rm=TRUE))
genData <- function(n) {
if(exists(".Random.seed", envir = .GlobalEnv)) {
save.seed <- get(".Random.seed", envir= .GlobalEnv)
on.exit(assign(".Random.seed", save.seed, envir = .GlobalEnv))
} else {
on.exit(rm(".Random.seed", envir = .GlobalEnv))
}
set.seed(n)
subj <- ceiling(n / 10)
id <- sample(subj, n, replace=TRUE)
times <- as.integer(difftime(as.POSIXct("2005-01-01"), as.POSIXct("2000-01-01"), units='secs'))
dt <- as.POSIXct(sample(times, n), origin='2000-01-01')
mu <- runif(subj, 4, 10)
a1c <- unsplit(mapply(rnorm, tabulate(id), mu, SIMPLIFY=FALSE), id)
data.frame(id, dt, a1c)
}
x <- genData(500)
reorder = function(x){
bob = order(x[,'id'], x[,'dt'])
x = x[bob ,]
}
x = reorder(x)
head(x)
library(lubridate)
oldsize = dim(x)[1]-1
for(slop in 1:4){
for(pl in 1:oldsize){
if(x[pl + 1, 1] == x[pl, 1])
{
if(difftime(x[pl + 1,2], x[pl, 2]) > 365.5){
x[dim(x)[1] + 1, 1] = x[pl, 1]
x[dim(x)[1] , 2] = x[pl, 2]  %m+% years(1)
}
}
}
x = reorder(x)
}
x = x[!duplicated(x),]
# TS: check with id==6, works.
x[x$id==6,]
x[1,"visit"] = 1
for(grr in 2:dim(x)[1]){
x[grr, "visit"] = 1
if(x[grr-1, "id"] == x[grr, "id"]){
x[grr, "visit"] = x[grr-1, "visit"] + 1
}
}
# TS: check with id==6, works.
x[x$id==6,]
# bobert = data.frame()
# numb = 0
# ehg = dim(x)[1] - 1
# for(job in 1:ehg){
# numb = numb + 1
# if(x[job, "id"] != x[job+1,"id"])
# {
#   bobert = rbind(mean(x[(job - numb):job, "a1c"], na.rm=TRUE), bobert)
#   numb = 0
# }
#
# }
# bobert = rbind(mean(x[(dim(x)[1] - numb):dim(x)[1], "a1c"], na.rm=TRUE), bobert)
# TS: It seems you'd like to calculate mean for 50 patients.
bobert = data.frame()
numb = 0
ehg = dim(x)[1] - 1
for(job in 1:ehg){
numb = numb + 1
if(x[job, "id"] != x[job+1,"id"])
{
# TS: correct the index. -0.5
# And this return the mean of patient with id 50 to  1
bobert = rbind(mean(x[(job - numb+1):job, "a1c"], na.rm=TRUE),bobert)
numb = 0
}
}
bobert = rbind(mean(x[(dim(x)[1] - numb):dim(x)[1], "a1c"], na.rm=TRUE), bobert)
bobert$X6.65444426795186 = rev(bobert$X6.65444426795186)
# for(jok in 1:dim(x)[1]){
#   if(is.na(x[jok, "a1c"]) == T ){
#     for(fl in 1:dim(bobert)){
#       if(fl == x[jok, "id"])
#       {
#         x[jok, "a1c"] = bobert[fl,]
#       }
#     }
#   }
# }
#Despite the error messages, it works!
# See code below.
for(jok in 1:dim(x)[1]){
if(is.na(x[jok, "a1c"])){
# dim(bobert) return 50,1. And you want to use nrow
for(fl in 1:dim(bobert)[1]){
if(fl == x[jok, "id"])
{
x[jok, "a1c"] = bobert[fl,]
}
}
}
}
print(tapply(x[,'a1c'], x[,'id'], mean, na.rm=TRUE))
print(tapply(x[,'visit'], x[,'id'], max, na.rm=TRUE))
for(jackal in 1:dim(x)[1]){
if(x[jackal,"id"] == 15){
print(x[jackal,])
}
}
data('sw_fry_1000', package = 'lexicon')
head(sw_fry_1000)
a = tolower(sw_fry_1000)
a =gsub("[^[:alnum:] ]", "", a)
print(sum(grepl("ar", a)))
a[substr(a,1 ,1) == "l" & substr(a,6 ,6) == "r" & nchar(a) == 6]
library("stringr")
a[substr(a,1 ,3) == "col" | str_sub(a, -3, - 1) == "eck"]
sum(grepl("BBBB", gsub("[^aeiouAEIOU]","B",a)))
a[substr(a,1 ,1) == "q" & substr(a,2 ,3) != "ui" ]
# TS: q is not necessary to be the first letter here. -0.5.
grep('q([^u]|u[^i])', a, value = TRUE)
a[substr(a,1 ,1) == "q" & substr(a,2 ,3) != "ui" ]
# TS: q is not necessary to be the first letter here. -0.5.
grep('q([^u]|u[^i])', a, value = TRUE)
apples = data.frame(str_split(a, "k"))
stringle= data.frame()
for(x in 1:1000){
if(apples[2,x] != apples[1,x] && apples[2,x] != ""){
print(a[x])
stringle = append(stringle, substr(apples[2,x],1, 1))
}
}
table(substr(stringle, 1, 1))
robelt = gsub("([^\\w ])[aeiou]", "", a) # This doesn't remove all vowels. See code below, -0.5.
robelt = gsub("[aeiou]", "", a)
sum(table(robelt)== 1)
bs <- function(n, mu, sd) {
tx <- rbinom(n,1,.5)
outcome <- rnorm(n, mu, sd)
data <- as.data.frame(matrix(cbind(tx, outcome), nrow = n))
colnames(data) <- c('treatment', 'outcome')
data[,2] <- ifelse(data[,1] == 1, data[,2]+5, data[,2]) #add 5 to treatment group
for(i in 1:R) {
boot.dat <- data[sample(nrow(data), nrow(data), replace=TRUE),]
dat <-split( boot.dat $outcome, f =  boot.dat$treatment) #separate data by group
zero <- unlist(dat[1]) #values for group 0
one <- unlist(dat[2]) #values for group 1
#store upper and lower limits of CI and mean for group 0
#conf.int0[i,1] <- mean(zero) + qnorm(0.025) * sd(zero) / sqrt(length(zero))
#conf.int0[i,2] <- mean(zero) + qnorm(0.975) * sd(zero) / sqrt(length(zero))
bmeans0[i] <- mean(zero)
#store upper and lower limits of CI and mean for group 1
#conf.int1[i,1] <- mean(one) + qnorm(0.025) * sd(one) / sqrt(length(one))
#conf.int1[i,2] <- mean(one) + qnorm(0.975) * sd(one) / sqrt(length(one))
bmeans1[i] <- mean(one)
}
m0 <- mean(bmeans0) #group 0 mean of all samples
m1 <- mean(bmeans1) #group 1 mean of all samples
TX0 <- quantile(bmeans0, c(0.025, 0.975)) #95% bootstrap CI for group 0
TX1 <- quantile(bmeans1, c(0.025, 0.975)) #95% bootstrap CI for group 1
print(c(m0, TX0, m1, TX1))
}
bs <- function(n, mu, sd) {
tx <- rbinom(n,1,.5)
outcome <- rnorm(n, mu, sd)
data <- as.data.frame(matrix(cbind(tx, outcome), nrow = n))
colnames(data) <- c('treatment', 'outcome')
data[,2] <- ifelse(data[,1] == 1, data[,2]+5, data[,2]) #add 5 to treatment group
for(i in 1:R) {
boot.dat <- data[sample(nrow(data), nrow(data), replace=TRUE),]
dat <-split( boot.dat $outcome, f =  boot.dat$treatment) #separate data by group
zero <- unlist(dat[1]) #values for group 0
one <- unlist(dat[2]) #values for group 1
#store upper and lower limits of CI and mean for group 0
#conf.int0[i,1] <- mean(zero) + qnorm(0.025) * sd(zero) / sqrt(length(zero))
#conf.int0[i,2] <- mean(zero) + qnorm(0.975) * sd(zero) / sqrt(length(zero))
bmeans0[i] <- mean(zero)
#store upper and lower limits of CI and mean for group 1
#conf.int1[i,1] <- mean(one) + qnorm(0.025) * sd(one) / sqrt(length(one))
#conf.int1[i,2] <- mean(one) + qnorm(0.975) * sd(one) / sqrt(length(one))
bmeans1[i] <- mean(one)
}
m0 <- mean(bmeans0) #group 0 mean of all samples
m1 <- mean(bmeans1) #group 1 mean of all samples
TX0 <- quantile(bmeans0, c(0.025, 0.975)) #95% bootstrap CI for group 0
TX1 <- quantile(bmeans1, c(0.025, 0.975)) #95% bootstrap CI for group 1
print(c(m0, TX0, m1, TX1))
}
ns <- seq(from = 250, to = 2500, by = 250) #the sample sizes we want to try
out <- as.data.frame(matrix(nrow = rep, ncol = 6)) #where output will be stored
R <- 1000
n <- 250
mu <- 60
sd <- 20
conf.int0 <- matrix(nrow=R, ncol=2) #empty matrix to store upper and lower limits for tx group 0
conf.int1 <- matrix(nrow=R, ncol=2) #empty matrix to store upper and lower limits for tx group 0
bmeans0 <- numeric(R) #bootstrap means tx group 0
bmeans1 <- numeric(R) #bootstrap means tx group 1
ns <- seq(from = 250, to = 2500, by = 250) #the sample sizes we want to try
out <- as.data.frame(matrix(nrow = rep, ncol = 6)) #where output will be
rep
out <- as.data.frame(matrix(nrow = 10, ncol = 6))
for (i in 1:10) {
out[i,] <- bs(ns[i], 60, 20)
}
names(out) <- c("mean0", "CI0ll", "CI0ul", "mean1", "CI1ll", "CI1ul")
out$set <- as.numeric(c(1:rep))
names(out) <- c("mean0", "CI0ll", "CI0ul", "mean1", "CI1ll", "CI1ul")
out$set <- as.numeric(c(1:10))
out0 <- cbind(out[,c("mean0", "CI0ll", "CI0ul", "set")], group = "0")
out1 <- cbind(out[,c("mean1", "CI1ll", "CI1ul", "set")], group = "1")
names(out0) <- names(out1) <- c("mean", "LL", "UL", "set", "group")
out2 <- rbind(out0, out1)
a <- ggplot(data = out2, aes(x = set, y = mean, group = group, color = group)) +
geom_line() +
geom_ribbon(aes(ymin = LL, ymax = UL, x = set, fill = group), alpha = .3, linetype = 0) +
scale_x_continuous(breaks = seq(2, 10, by = 2)) +
ylab('Group Average') +
xlab('Bootstrap Interval') +
ylim(50,75)
library(ggplot2)
a <- ggplot(data = out2, aes(x = set, y = mean, group = group, color = group)) +
geom_line() +
geom_ribbon(aes(ymin = LL, ymax = UL, x = set, fill = group), alpha = .3, linetype = 0) +
scale_x_continuous(breaks = seq(2, 10, by = 2)) +
ylab('Group Average') +
xlab('Bootstrap Interval') +
ylim(50,75)
a + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
makePatient <- function() {
vowel <- grep("[aeiou]", letters)
cons <- grep("[^aeiou]", letters)
name <- paste(sample(LETTERS[cons], 1), sample(letters[vowel], 1), sample(letters[cons], 1), sep='')
gender <- factor(sample(0:1, 1), levels=0:1, labels=c('female','male'))
dob <- as.Date(sample(7500, 1), origin="1970-01-01")
n <- sample(6, 1)
doa <- as.Date(sample(1500, n), origin="2010-01-01")
pulse <- round(rnorm(n, 80, 10))
temp <- round(rnorm(n, 98.4, 0.3), 2)
fluid <- round(runif(n), 2)
list(name, gender, dob, doa, pulse, temp, fluid)
}
methods(mean) #these are the current methods for mean and I want to add mean.medicalRecord
mean.medicalRecord <- function(x) {
means <- rep(NA, 3)
means[1] <- mean(x[[5]])
means[2] <- mean(x[[6]])
means[3] <- mean(x[[7]])
names(means) <- Hmisc::Cs(pulse, temp, fluids) #using the Hmisc package to save typing all the quotes, so nice!!
return(means)
}
mean(YesMR) #why did I need to coerce this one to use mean
medicalRecord <- function(){
#this function will define the class of the medical record
x <- makePatient()
class(x) <- "medicalRecord"
names(x) <- c('name','gender','date_of_birth','date_of_admission',
'pulse','temperature','fluid_intake') #the input is from makepatient which gives us a named list
return(x)
}
set.seed(8)
YesMR <- medicalRecord() #sometimes the seed changes if you don't run them at the same time (why?)
YesMR #printing the medical record
class(YesMR) #it worked!!
methods(mean) #these are the current methods for mean and I want to add mean.medicalRecord
mean.medicalRecord <- function(x) {
means <- rep(NA, 3)
means[1] <- mean(x[[5]])
means[2] <- mean(x[[6]])
means[3] <- mean(x[[7]])
names(means) <- Hmisc::Cs(pulse, temp, fluids) #using the Hmisc package to save typing all the quotes, so nice!!
return(means)
}
mean(YesMR) #why did I need to coerce this one to use mean
print.medicalRecord <- function(x){
x$date_of_admission <- as.POSIXct(x$date_of_admission)
#I want to print a data frame
newdf <- as.data.frame(x[4:7])
cat(sprintf("name : %s\n Gender: %s \n DOB %s", x$name, x$gender, x$date_of_birth), "\n")
print(newdf[order(newdf$date_of_admission),])   #arrange measurements by date
} #this will return the printed cat statement and a sorted data frame
print(YesMR)
plot.medicalRecord <- function(x){
par(mfrow=c(1,3)) #make 3 plots of pulse, temp, and fluid intake
plot(x$date_of_admission, x$pulse, ylim = c(65, 95), "b", ylab = "Patient Pulse", xlab = "date")
plot(x$date_of_admission, x$temperature, ylim = c(95, 103), "b", ylab = "Patient Temp (F)", xlab= "date")
plot(x$date_of_admission, x$fluid_intake, ylim = c(0,3), "b", ylab = "Patient Fluid Intake", xlab= "date")
# x axis is each of the dates (in order), then each plot has the measurements on the y axis
}
plot(YesMR) #nice! I could make the plots prettier but this will work for now
#install.packages("readxl")
library(readxl)
fn <- 'icd10.xlsx'
if(file.access(fn, mode = 4) == -1) {
url <- "https://www.cdc.gov/nhsn/xls/icd10-pcs-pcm-nhsn-opc.xlsx"
download.file(url, destfile = fn, mode = 'wb')
}
dat <- readxl::read_excel(fn, sheet = 2)
class(dat)
methods(,"tbl_df") #the first argument of methods tells you methods regardless of class
#second argument of the methods function tells us methods for a specific class
methods(, "tbl")
methods(,data.frame) #WHY DOES THIS ONE NOT NEED QUOTES?
print(dat) # UseMethod("print") ??
getAnywhere(print.tbl) # find print.tbl which is hidden. output says <environment: namespace:pillar>
pillar:::print.tbl(dat)
#looks exactly the same so we know it's using the print.tbl method
class(dat) <- "data.frame"
attributes(dat) #double checking
print(dat)
nUnique <- function(x) {
UseMethod('nUnique')
}
nUnique.default <- function(x){
a <- unique(x)
length(a)
}
#format is method I defined and then the class
nUnique.data.frame <- function(df){
col_counts <- rep(NA, ncol(df)) #create an empty vector that is the same length as the number of columns in the data frame
for(i in 1:ncol(df)) {
col_counts[i] <- length(unique(df[,i]))
}
names(col_counts) <- colnames(df)
return(col_counts)
}
# could use apply and call the unique I made earlier
# nUnique.data.frame <- function(df){
#   apply(df, 2, nUnique) # 2 means counting by column
#   }
makePatient <- function() {
vowel <- grep("[aeiou]", letters)
cons <- grep("[^aeiou]", letters)
name <- paste(sample(LETTERS[cons], 1), sample(letters[vowel], 1), sample(letters[cons], 1), sep='')
gender <- factor(sample(0:1, 1), levels=0:1, labels=c('female','male'))
dob <- as.Date(sample(7500, 1), origin="1970-01-01")
n <- sample(6, 1)
doa <- as.Date(sample(1500, n), origin="2010-01-01")
pulse <- round(rnorm(n, 80, 10))
temp <- round(rnorm(n, 98.4, 0.3), 2)
fluid <- round(runif(n), 2)
list(name, gender, dob, doa, pulse, temp, fluid)
}
medicalRecord <- function(){
#this function will define the class of the medical record
x <- makePatient()
class(x) <- "medicalRecord"
names(x) <- c('name','gender','date_of_birth','date_of_admission',
'pulse','temperature','fluid_intake') #the input is from makepatient which gives us a named list
return(x)
}
set.seed(8)
YesMR <- medicalRecord() #sometimes the seed changes if you don't run them at the same time (why?)
YesMR #printing the medical record
class(YesMR) #it worked!!
methods(mean) #these are the current methods for mean and I want to add mean.medicalRecord
mean.medicalRecord <- function(x) {
means <- rep(NA, 3)
means[1] <- mean(x[[5]])
means[2] <- mean(x[[6]])
means[3] <- mean(x[[7]])
names(means) <- Hmisc::Cs(pulse, temp, fluids) #using the Hmisc package to save typing all the quotes, so nice!!
return(means)
}
mean(YesMR) #why did I need to coerce this one to use mean
print.medicalRecord <- function(x){
x$date_of_admission <- as.POSIXct(x$date_of_admission)
#I want to print a data frame
newdf <- as.data.frame(x[4:7])
cat(sprintf("name : %s\n Gender: %s \n DOB %s", x$name, x$gender, x$date_of_birth), "\n")
print(newdf[order(newdf$date_of_admission),])   #arrange measurements by date
} #this will return the printed cat statement and a sorted data frame
print(YesMR)
plot.medicalRecord <- function(x){
par(mfrow=c(1,3)) #make 3 plots of pulse, temp, and fluid intake
plot(x$date_of_admission, x$pulse, ylim = c(65, 95), "b", ylab = "Patient Pulse", xlab = "date")
plot(x$date_of_admission, x$temperature, ylim = c(95, 103), "b", ylab = "Patient Temp (F)", xlab= "date")
plot(x$date_of_admission, x$fluid_intake, ylim = c(0,3), "b", ylab = "Patient Fluid Intake", xlab= "date")
# x axis is each of the dates (in order), then each plot has the measurements on the y axis
}
plot(YesMR) #nice! I could make the plots prettier but this will work for now
makecohort <- function(numPts) {
cohort <- replicate(numPts, medicalRecord(), simplify = FALSE) #is a list of lists, this creates 10 patients using the makePatient function
class(cohort) <- "cohort"
cohort
}
set.seed(8)
a <- makecohort(numPts = 10)
#class(a) <- c("cohort", "medicalRecord")
#inherits(a, 'cohort')
a[[2]][5] #accessing the pulse of the 7th patient on the list
#MAKING IT AS A MATRIX
mean.cohort <- function(cohort){
mean_matrix <- matrix(nrow = length(cohort), ncol = 3)
for(i in 1:length(cohort)){
mean_matrix[i,1] <- mean(unlist(cohort[[i]][5]))
mean_matrix[i,2] <- mean(unlist(cohort[[i]][6]))
mean_matrix[i,3] <- mean(unlist(cohort[[i]][7]))
}
namelist <- c()
for(i in 1:length(cohort)){
nameadd <- cohort[[i]]$name
namelist <- c(namelist, nameadd)
}
row.names(mean_matrix) <- namelist
# names(mean_list[[1]]) <- namelist
# names(mean_list[[2]]) <- namelist
# names(mean_list[[3]]) <- namelist
# pulses <- mean_list[[1]]
# names(pulses) <- names(cohort)
return(mean_matrix) #it's not very nice but it works
}
#
mean(a)
mean.cohort <- function(cohort){
mean_list <- list(pulse = c(), temp = c(), fluids = c())
for(i in 1:length(cohort)){
mean_list[[1]][i] <- mean(unlist(cohort[[i]][5]))
mean_list[[2]][i] <- mean(unlist(cohort[[i]][6]))
mean_list[[3]][i] <- mean(unlist(cohort[[i]][7]))
}
namelist <- c()
for(i in 1:length(cohort)){
nameadd <- cohort[[i]]$name
namelist <- c(namelist, nameadd)
}
names(mean_list[[1]]) <- namelist
names(mean_list[[2]]) <- namelist
names(mean_list[[3]]) <- namelist
# pulses <- mean_list[[1]]
# names(pulses) <- names(cohort)
return(mean_list) #it's not very nice but it works
}
mean.cohort(a)
print.cohort <- function(cohort){
for(i in cohort){
print(i)
}
}
print(a)
library(readxl)
fn <- 'icd10.xlsx'
if(file.access(fn, mode = 4) == -1) {
url <- "https://www.cdc.gov/nhsn/xls/icd10-pcs-pcm-nhsn-opc.xlsx"
download.file(url, destfile = fn, mode = 'wb')
}
dat <- readxl::read_excel(fn, sheet = 2)
class(dat)
library(dplyr)
methods(, tbl_df)
methods(, tbl)
methods(, data.frame)
#print(dat)
class(dat) <- 'data.frame'
class(dat)
#print(dat)
nUnique <- function(x) {
UseMethod('nUnique')
}
nUnique.default <- function(x) {
length(unique(x))
}
nUnique.data.frame <- function(x){
sapply(x, nUnique) #apply nUnique over each column in the dataframe
}
class(dat) <- 'data.frame'
class(dat)
#print(dat)
nUnique <- function(x) {
UseMethod('nUnique')
}
nUnique.default <- function(x) {
length(unique(x))
}
nUnique(letters) # should return 26
nUnique(sample(10, 100, replace = TRUE)) # should return 10 (probably)
nUnique.data.frame <- function(x){
sapply(x, nUnique) #apply nUnique over each column in the dataframe
}
nUnique(dat)
install.packages("readxl", repos="http://cran.us.r-project.org") # it doesn't like my mirror
library(readxl)
fn <- 'icd10.xlsx'
if(file.access(fn, mode = 4) == -1) {
url <- "https://www.cdc.gov/nhsn/xls/icd10-pcs-pcm-nhsn-opc.xlsx"
download.file(url, destfile = fn, mode = 'wb')
}
install.packages("readxl", repos = "http://cran.us.r-project.org")
